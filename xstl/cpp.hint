// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define NIL
// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define _TREE_DUDECTION_GUIDES(TREE) template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&)->TREE < _Tp, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Iter> TREE(_Iter, _Iter)->TREE <typename std::iterator_traits<_Iter>::value_type, std::less<typename std::iterator_traits<_Iter>::value_type>, _DEFAULT_ALLOC(typename std::iterator_traits<_Iter>::value_type)>; template <class _Iter, class _Compare, class _Alloc> TREE(_Iter, _Iter, const _Compare&, const _Alloc&)->TREE <typename std::iterator_traits<_Iter>::value_type, _Compare, _Alloc>; template <class _Tp> TREE(std::initializer_list<_Tp>)->TREE <_Tp, std::less<_Tp>, _DEFAULT_ALLOC(_Tp)>; template <class _Tp, class _Compare, class _Alloc> TREE(std::initializer_list<_Tp>, const _Compare&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>;
// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define _TREE_DUDECTION_GUIDES(TREE) template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&)->TREE < _Tp, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Iter> TREE(_Iter, _Iter)->TREE <typename std::iterator_traits<_Iter>::value_type, std::less<typename std::iterator_traits<_Iter>::value_type>, _DEFAULT_ALLOC(typename std::iterator_traits<_Iter>::value_type)>; template <class _Iter, class _Compare, class _Alloc> TREE(_Iter, _Iter, const _Compare&, const _Alloc&)->TREE <typename std::iterator_traits<_Iter>::value_type, _Compare, _Alloc>; template <class _Tp> TREE(std::initializer_list<_Tp>)->TREE <_Tp, std::less<_Tp>, _DEFAULT_ALLOC(_Tp)>; template <class _Tp, class _Compare, class _Alloc> TREE(std::initializer_list<_Tp>, const _Compare&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>;
// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define _DEFAULT_ALLOC(_Tp)
#define _DEFAULT_ALLOC(_Tp) xstl::alloc_wrapper<_Tp, xstl::__unique_alloc<_UNIQUE_INST(_Tp)>>
// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define _TREE_DUDECTION_GUIDES(TREE) template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&)->TREE < _Tp, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Iter> TREE(_Iter, _Iter)->TREE <typename std::iterator_traits<_Iter>::value_type, std::less<typename std::iterator_traits<_Iter>::value_type>, _DEFAULT_ALLOC(typename std::iterator_traits<_Iter>::value_type)>; template <class _Iter, class _Compare, class _Alloc> TREE(_Iter, _Iter, const _Compare&, const _Alloc&)->TREE <typename std::iterator_traits<_Iter>::value_type, _Compare, _Alloc>; template <class _Tp> TREE(std::initializer_list<_Tp>)->TREE <_Tp, std::less<_Tp>, _DEFAULT_ALLOC(_Tp)>; template <class _Tp, class _Compare, class _Alloc> TREE(std::initializer_list<_Tp>, const _Compare&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>;
// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define _TREE_DUDECTION_GUIDES(TREE) template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&)->TREE < _Tp, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Iter> TREE(_Iter, _Iter)->TREE <typename std::iterator_traits<_Iter>::value_type, std::less<typename std::iterator_traits<_Iter>::value_type>, _DEFAULT_ALLOC(typename std::iterator_traits<_Iter>::value_type)>; template <class _Iter, class _Compare, class _Alloc> TREE(_Iter, _Iter, const _Compare&, const _Alloc&)->TREE <typename std::iterator_traits<_Iter>::value_type, _Compare, _Alloc>; template <class _Tp> TREE(std::initializer_list<_Tp>)->TREE <_Tp, std::less<_Tp>, _DEFAULT_ALLOC(_Tp)>; template <class _Tp, class _Compare, class _Alloc> TREE(std::initializer_list<_Tp>, const _Compare&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>;
// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define _TREE_DUDECTION_GUIDES(TREE) template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(const TREE<_Tp, _Compare, _Alloc>&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&)->TREE < _Tp, _Alloc>; template <class _Tp, class _Compare, class _Alloc> TREE(TREE<_Tp, _Compare, _Alloc>&&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>; template <class _Iter> TREE(_Iter, _Iter)->TREE <typename std::iterator_traits<_Iter>::value_type, std::less<typename std::iterator_traits<_Iter>::value_type>, _DEFAULT_ALLOC(typename std::iterator_traits<_Iter>::value_type)>; template <class _Iter, class _Compare, class _Alloc> TREE(_Iter, _Iter, const _Compare&, const _Alloc&)->TREE <typename std::iterator_traits<_Iter>::value_type, _Compare, _Alloc>; template <class _Tp> TREE(std::initializer_list<_Tp>)->TREE <_Tp, std::less<_Tp>, _DEFAULT_ALLOC(_Tp)>; template <class _Tp, class _Compare, class _Alloc> TREE(std::initializer_list<_Tp>, const _Compare&, const _Alloc&)->TREE <_Tp, _Compare, _Alloc>;
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define CHAR_BIT
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define assert(expression) ((void)0)
#define assert(expression) (void)( (!!(expression)) || (_wassert(_CRT_WIDE(#expression), _CRT_WIDE(__FILE__), (unsigned)(__LINE__)), 0) )
